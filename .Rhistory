## shiny 설치하기
install.packages("shiny")
requireNamespace("devtools")
requireNamespace
requireNamespace()
requireNamespace(base)
requireNamespace("base")
requireNamespace("base")
s = requireNamespace("base")
s
s = requireNamespace("devtools")
s
## ====================
##  02. 예제 확인하기
## ====================
runExample()
library(shiny)
## ====================
##  02. 예제 확인하기
## ====================
runExample()
runExample("01_hello")
runExample("04_mpg")
runExample("08_html")
install.packages("shinydashboard")
runGitHub(repo="shiny-examples", username="rstudio",
subdir="086-bus-dashboard")
library(shinydashboard)
runGitHub(repo="shiny-examples", username="rstudio",
subdir="086-bus-dashboard")
install.packages("leaflet") # error 발생시
runGitHub(repo="shiny-examples", username="rstudio",
subdir="086-bus-dashboard")
install.packages(c('shiny', 'ggvis', 'dplyr', 'RSQLite'))
install.packages(c("shiny", "ggvis", "dplyr", "RSQLite"))
runGitHub(repo="shiny-examples", username="rstudio",
subdir="051-movie-explorer")
runGitHub(repo="shiny-examples", username="rstudio",
subdir="051-movie-explorer")
runGitHub(repo="shiny-examples", username="rstudio",
subdir="050-kmeans-example")
library(shinydashboard)
runGitHub(repo="shiny-examples", username="rstudio",
subdir="050-kmeans-example")
library(shiny)
runGitHub(repo="shiny-examples", username="rstudio",
subdir="050-kmeans-example")
runGitHub(repo="shiny-examples", username="rstudio",
subdir="051-movie-explorer")
install.packages("ggvis")
## ====================
##  03. 기본 소스 코드
## ====================
library(shiny)
ui <- fluidPage()
server <- function(input, output){ }
shinyApp(ui=ui,server=server)
library(shiny)
ui <- fluidPage(
# *Input()  함수로 입력받는 요소
# *Output() 함수로 결과물을 출력 후, 배치
## titlePanel, sidebarLayout, mainPanel로 구성
# App title
titlePanel("Hello My Shiny!"),
# sidebarLayout
# sidebar panel for inputs
sidebarLayout (
sidebarPanel(
# Input : bins의 수를 slider로 구현
sliderInput(inputId="bins",
label = "Number of bins:",
min=1,
max=50,
value=30)
),
mainPanel(
# Output: Histgram
plotOuput(outputId="distPlot")
)
)
)
ui <- fluidPage(
# *Input()  함수로 입력받는 요소
# *Output() 함수로 결과물을 출력 후, 배치
## titlePanel, sidebarLayout, mainPanel로 구성
# App title
titlePanel("Hello My Shiny!"),
# sidebarLayout
# sidebar panel for inputs
sidebarLayout (
sidebarPanel(
# Input : bins의 수를 slider로 구현
sliderInput(inputId="bins",
label = "Number of bins:",
min=1,
max=50,
value=30)
),
mainPanel(
# Output: Histgram
plotOutput(outputId="distPlot")
)
)
)
server <- function(input, output){
output$distPlot <- renderPlot( {
x = faithful$waiting
bins = seq(min(x), max(x), length.out=input$bins + 1)
hist(x, breaks=bins, col="#75AADB")
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId="dataset",
label="데이터 셋 선택:",
choices=c("rock", "pressure", "cars")),
numericInput(inputId='obs',
label="관측치의 수",
value=10)
),
mainPanel(
# Output:Verbatim text for data summary ----
verbatimTextOutput("summary"),  #코드 글자
# Output: HTML table
tableOutput("view")   # 글자
)
)
)
server <- function(input, output){
# selectInput(inputId="dataset"
# 요청된 데이터 셋이 반환됨.
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# data
# verbatimTextOutput("summary")
ouput$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# 첫 n개의 관측치를 보여준다.
output$view <- renderTable({
head(datasetInput(), n=input$obs)
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId="dataset",
label="데이터 셋 선택:",
choices=c("rock", "pressure", "cars")),
numericInput(inputId='obs',
label="관측치의 수",
value=10)
),
mainPanel(
# Output:Verbatim text for data summary ----
verbatimTextOutput("summary"),  #코드 글자
# Output: HTML table
tableOutput("view")   # 글자
)
)
)
server <- function(input, output){
# selectInput(inputId="dataset"
# 요청된 데이터 셋이 반환됨.
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# data
# verbatimTextOutput("summary")
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# 첫 n개의 관측치를 보여준다.
output$view <- renderTable({
head(datasetInput(), n=input$obs)
})
}
shinyApp(ui=ui,server=server)
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId="dataset",
label="데이터 셋 선택:",
choices=c("rock", "pressure", "cars")),
numericInput(inputId='obs',
label="관측치의 수",
value=10)
),
mainPanel(
# Output:Verbatim text for data summary ----
verbatimTextOutput("summary"),  #코드 글자
# Output: HTML table
tableOutput("view")   # 글자
)
)
)
server <- function(input, output){
# selectInput(inputId="dataset"
# 요청된 데이터 셋이 반환됨.
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = mtcars)
})
# data
# verbatimTextOutput("summary")
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# 첫 n개의 관측치를 보여준다.
output$view <- renderTable({
head(datasetInput(), n=input$obs)
})
}
shinyApp(ui=ui,server=server)
## 실습 1. dateset를 불러와서 이를 확인해 보자.
##
data(MASS)
data()
library(shiny)
shiny::runApp('DrawScatterPlot')
library(shiny)
shiny::runApp('DrawScatterPlot')
library(shiny)
shiny::runApp('DrawScatterPlot')
